[{"E:\\Project\\React_Applications\\n_queens\\src\\index.js":"1","E:\\Project\\React_Applications\\n_queens\\src\\App.js":"2","E:\\Project\\React_Applications\\n_queens\\src\\reportWebVitals.js":"3","E:\\Project\\React_Applications\\n_queens\\src\\home.jsx":"4","E:\\Project\\React_Applications\\n_queens\\src\\chessboard.jsx":"5"},{"size":500,"mtime":499162500000,"results":"6","hashOfConfig":"7"},{"size":277,"mtime":1659976440819,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"7"},{"size":403,"mtime":1612449728928,"results":"10","hashOfConfig":"7"},{"size":2381,"mtime":1658402589592,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"j1irw5",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"14"},"E:\\Project\\React_Applications\\n_queens\\src\\index.js",[],["24","25"],"E:\\Project\\React_Applications\\n_queens\\src\\App.js",[],"E:\\Project\\React_Applications\\n_queens\\src\\reportWebVitals.js",[],"E:\\Project\\React_Applications\\n_queens\\src\\home.jsx",[],"E:\\Project\\React_Applications\\n_queens\\src\\chessboard.jsx",["26","27"],"import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Chessboard = ({ n }) => {\r\n  window.value = n;\r\n  \r\n  const chessboard = [];\r\n  let alpha = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"];\r\n  for (let i = 0; i < n; i++) {\r\n    for (let j = 1; j <= n; j++) {\r\n      chessboard.push((alpha[i] + j).toString());\r\n    }\r\n  }\r\n\r\n  const changecol = (e) => {\r\n    console.log(e);\r\n    const l = e.target.id;\r\n    if (document.getElementById(l).style.backgroundColor === \"green\") {\r\n      return false;\r\n    }\r\n    document.getElementById(l).innerHTML = \"Q\";\r\n    for (let i = 1; i <= n; i++) {\r\n      document.getElementById((l[0] + i).toString()).style.backgroundColor =\r\n        \"green\";\r\n      document.getElementById(\r\n        (alpha[i - 1] + l[1]).toString()\r\n      ).style.backgroundColor = \"green\";\r\n    }\r\n    // variables for changing color along diagonals\r\n    let i = alpha.indexOf(l[0]),\r\n      j = l[1],\r\n      k = l[1];\r\n\r\n    //Changing color of diagonal downwards\r\n    while (i <= n - 1) {\r\n      if (j <= n) {\r\n        document.getElementById(\r\n          (alpha[i] + j).toString()\r\n        ).style.backgroundColor = \"green\";\r\n        j++;\r\n      }\r\n      if (k > 0) {\r\n        document.getElementById(\r\n          (alpha[i] + k).toString()\r\n        ).style.backgroundColor = \"green\";\r\n        k--;\r\n      }\r\n      i++;\r\n    }\r\n\r\n    //Resetting variables for remaining squares to be colored\r\n    i = alpha.indexOf(l[0]);\r\n    j = l[1];\r\n    k = l[1];\r\n\r\n    while (i >= 0) {\r\n      if (j > 0) {\r\n        document.getElementById(\r\n          (alpha[i] + j).toString()\r\n        ).style.backgroundColor = \"green\";\r\n        j--;\r\n      }\r\n      if (k <= n) {\r\n        document.getElementById(\r\n          (alpha[i] + k).toString()\r\n        ).style.backgroundColor = \"green\";\r\n        k++;\r\n      }\r\n      i--;\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      <Board>\r\n        {chessboard.map((x) => {\r\n          return <Square id={x} onClick={changecol}></Square>;\r\n        })}\r\n      </Board>\r\n    </div>\r\n  );\r\n};\r\nconst n = window.value;\r\nexport default Chessboard;\r\n\r\nconst Board = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(8, 75px);\r\n  justify-content: center;\r\n  align-items: center;\r\n  gap: 5px;\r\n`;\r\n\r\nconst Square = styled.button`\r\n  height: 75px;\r\n  width: 75px;\r\n  background-color: #ff4444;\r\n  outline: none;\r\n`;\r\n",{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","severity":1,"message":"33","line":1,"column":17,"nodeType":"34","messageId":"35","endLine":1,"endColumn":25},{"ruleId":"32","severity":1,"message":"36","line":82,"column":7,"nodeType":"34","messageId":"35","endLine":82,"endColumn":8},"no-native-reassign",["37"],"no-negated-in-lhs",["38"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'n' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]